import{a6 as T,x as _,a8 as q,a5 as j,a9 as C,a4 as e,a7 as f,aa as d,ab as y,ac as o,ad as D,a3 as E,ae as F,af as I,ag as J,ah as O,ai as P}from"./entry.a8bdde5b.js";const R=()=>{const p=T(),x=_("fastfirestore",()=>null),b={},B=()=>(x.value===null&&(x.value=R()),x.value),S=a=>b[a]&&typeof b[a].code=="string"?b[a].code:null,v=a=>q(j(p,a)).id;return{getinstance:B,errors:b,geterrorcode:S,newuid:v,get:async(a,s)=>{try{const c=await C(q(p,a,s));if(console.log("snapshot=",c),c.exists())return c}catch(c){return console.error(c),b["get:"+a+"/"+s]=c,!1}return null},gets:async(a,s,c,l,u)=>{let n=e(j(p,a));if(s)for(let t=0;t<s.length;t++)if(s[t][0]=="or")n=e(n,s[t][1]);else switch(s[t][1]){case"==":n=e(n,f(s[t][0],"==",s[t][2]));break;case"<":n=e(n,f(s[t][0],"<",s[t][2]));break;case"<=":n=e(n,f(s[t][0],"<=",s[t][2]));break;case">":n=e(n,f(s[t][0],">",s[t][2]));break;case">=":n=e(n,f(s[t][0],">=",s[t][2]));break;case"!=":n=e(n,f(s[t][0],"!=",s[t][2]));break;case"array-contains":n=e(n,f(s[t][0],"array-contains",s[t][2]));break;case"array-contains-any":n=e(n,f(s[t][0],"array-contains-any",s[t][2]));break;case"in":n=e(n,f(s[t][0],"in",s[t][2]));break;case"not-in":n=e(n,f(s[t][0],"not-in",s[t][2]));break}let i=Object.assign({},n);if(c&&l&&u)for(let t=0;t<c.length;t++)switch(c[t][1]){case"asc":n=e(n,o(c[t][0],"asc"),y(u),d(l));break;case"desc":n=e(n,o(c[t][0],"desc"),y(u),d(l));break;default:n=e(n,o(c[t][0]),y(u),d(l));break}else if(c&&u)for(let t=0;t<c.length;t++)switch(c[t][1]){case"asc":n=e(n,o(c[t][0],"asc"),y(u));break;case"desc":n=e(n,o(c[t][0],"desc"),y(u));break;default:n=e(n,o(c[t][0]),y(u));break}else if(c&&l)for(let t=0;t<c.length;t++)switch(c[t][1]){case"asc":n=e(n,o(c[t][0],"asc"),d(l));break;case"desc":n=e(n,o(c[t][0],"desc"),d(l));break;default:n=e(n,o(c[t][0]),d(l));break}else if(c)for(let t=0;t<c.length;t++)switch(c[t][1]){case"asc":n=e(n,o(c[t][0],"asc"));break;case"desc":n=e(n,o(c[t][0],"desc"));break;default:n=e(n,o(c[t][0]));break}console.log("q=",n);const k=await D(n);if(console.log("snapshots=",k),0<k.docs.length){const t=await E(i);if(t&&t.data())return{total:t.data().count,docs:k.docs}}return[null,null]},set:async(a,s)=>{try{console.log("argdata=",s);let c="";return s.uid?c=s.uid:(c=v(a),console.log("newuid=",c),s.uid=c),await F(q(p,a,c),s,{merge:!0}),!0}catch(c){return b["set:"+a]=c,!1}},sets:async(a,s)=>{},upload:async(a,s,c)=>{const l=I(J(O(),s),a);return await new Promise(function(u,n){l.on("state_changed",i=>{const k=i.bytesTransferred/i.totalBytes*100;console.log("Upload is "+k+"% done"),typeof c=="function"&&c(k,i)},i=>{console.log("upload error=",i),u(!1)},()=>{P(l.snapshot.ref).then(i=>{console.log("File available at",i),u(i)})})})}}};export{R as f};
